{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js.1d3f4d03abd2b882.js","mappings":"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","names":["Accordion","constructor","hostRef","registerInstance","this","updateListener","updateState","state","isNext","isPrevious","value","accordionIds","disabled","readonly","toggleIcon","chevronDown","toggleIconSlot","setItemDefaults","ionItem","getSlottedHeaderIonItem","button","detail","undefined","lines","headerEl","slot","querySelector","assignedElements","find","el","tagName","setAria","expanded","getElementRoot","setAttribute","slotToggleIcon","iconEl","document","createElement","lazy","classList","add","icon","appendChild","expandAccordion","initialUpdate","contentEl","contentElWrapper","currentRaf","cancelAnimationFrame","shouldAnimate","raf","contentHeight","offsetHeight","waitForTransition","transitionEndAsync","style","setProperty","_this","removeProperty","collapseAccordion","window","matchMedia","matches","config","accordionGroupEl","animated","accordionGroup","accordionValue","Array","isArray","includes","nextAccordion","getNextSibling","nextAccordionValue","previousAccordion","getPreviousSibling","previousAccordionValue","nextSibling","nextElementSibling","previousSibling","previousElementSibling","connectedCallback","_a","closest","addEventListener","disconnectedCallback","removeEventListener","componentDidLoad","toggleExpanded","expand","requestAccordionToggle","render","mode","getIonMode","headerPart","contentPart","h","Host","class","t","onClick","id","part","ref","name","role","delegatesFocus","getElement","ios","md","AccordionGroup","ionChange","createEvent","valueChanged","multiple","emit","disabledChanged","_this2","accordions","getAccordions","accordion","readonlyChanged","_this3","onKeydown","ev","activeElement","accordionEl","_this4","startingIndex","findIndex","a","key","findNextAccordion","findPreviousAccordion","length","focus","_this5","accordionExpand","_this6","groupValue","processedValue","v","filter","prevAccordion","from","_this7","querySelectorAll","n","watchers"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-accordion_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-8e692445.js';\nimport { l as chevronDown } from './index-da396832.js';\nimport { c as config, b as getIonMode } from './ionic-global-c95cf239.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-3b390e48.js';\n\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\n\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\n\nconst Accordion = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.updateListener = () => this.updateState(false);\n    this.state = 1 /* AccordionState.Collapsed */;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n    this.toggleIconSlot = 'end';\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n    this.getSlottedHeaderIonItem = () => {\n      const { headerEl } = this;\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n      const slot = headerEl.querySelector('slot');\n      if (!slot) {\n        return;\n      }\n      // This is not defined in unit tests\n      if (slot.assignedElements === undefined)\n        return;\n      return slot.assignedElements().find((el) => el.tagName === 'ION-ITEM');\n    };\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n      if (!button) {\n        return;\n      }\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      const { toggleIconSlot, toggleIcon } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n      if (existingToggleIcon) {\n        return;\n      }\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n    this.expandAccordion = (initialUpdate = false) => {\n      const { contentEl, contentElWrapper } = this;\n      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n        this.state = 4 /* AccordionState.Expanded */;\n        return;\n      }\n      if (this.state === 4 /* AccordionState.Expanded */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8 /* AccordionState.Expanding */;\n          this.currentRaf = raf(async () => {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            await waitForTransition;\n            this.state = 4 /* AccordionState.Expanded */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 4 /* AccordionState.Expanded */;\n      }\n    };\n    this.collapseAccordion = (initialUpdate = false) => {\n      const { contentEl } = this;\n      if (initialUpdate || contentEl === undefined) {\n        this.state = 1 /* AccordionState.Collapsed */;\n        return;\n      }\n      if (this.state === 1 /* AccordionState.Collapsed */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf(async () => {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf(async () => {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            this.state = 2 /* AccordionState.Collapsing */;\n            await waitForTransition;\n            this.state = 1 /* AccordionState.Collapsed */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 1 /* AccordionState.Collapsed */;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n      if (prefersReducedMotion) {\n        return false;\n      }\n      const animated = config.get('animated', true);\n      if (!animated) {\n        return false;\n      }\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n      return true;\n    };\n    this.updateState = async (initialUpdate = false) => {\n      const accordionGroup = this.accordionGroupEl;\n      const accordionValue = this.value;\n      if (!accordionGroup) {\n        return;\n      }\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n      if (shouldExpand) {\n        this.expandAccordion(initialUpdate);\n        this.isNext = this.isPrevious = false;\n      }\n      else {\n        this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n        const nextAccordion = this.getNextSibling();\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n        if (nextAccordionValue !== undefined) {\n          this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n        const previousAccordion = this.getPreviousSibling();\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n        if (previousAccordionValue !== undefined) {\n          this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    };\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const nextSibling = this.el.nextElementSibling;\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return nextSibling;\n    };\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const previousSibling = this.el.previousElementSibling;\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return previousSibling;\n    };\n  }\n  connectedCallback() {\n    var _a;\n    const accordionGroupEl = (this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group'));\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n      this.setAria(expanded);\n    });\n  }\n  toggleExpanded() {\n    const { accordionGroupEl, value, state } = this;\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n  render() {\n    const { disabled, readonly } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return (h(Host, { class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n        'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n        'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n        'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': config.getBoolean('animated', true),\n      } }, h(\"div\", { onClick: () => this.toggleExpanded(), id: \"header\", part: headerPart, \"aria-controls\": \"content\", ref: (headerEl) => (this.headerEl = headerEl) }, h(\"slot\", { name: \"header\" })), h(\"div\", { id: \"content\", part: contentPart, role: \"region\", \"aria-labelledby\": \"header\", ref: (contentEl) => (this.contentEl = contentEl) }, h(\"div\", { id: \"content-wrapper\", ref: (contentElWrapper) => (this.contentElWrapper = contentElWrapper) }, h(\"slot\", { name: \"content\" })))));\n  }\n  static get delegatesFocus() { return true; }\n  get el() { return getElement(this); }\n};\nlet accordionIds = 0;\nAccordion.style = {\n  ios: accordionIosCss,\n  md: accordionMdCss\n};\n\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\n\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\n\nconst AccordionGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    /**\n     * If `true`, all accordions inside of the\n     * accordion group will animate when expanding\n     * or collapsing.\n     */\n    this.animated = true;\n    /**\n     * If `true`, the accordion group cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion group cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * Describes the expansion behavior for each accordion.\n     * Possible values are `\"compact\"` and `\"inset\"`.\n     * Defaults to `\"compact\"`.\n     */\n    this.expand = 'compact';\n  }\n  valueChanged() {\n    const { value, multiple } = this;\n    /**\n     * If accordion group does not\n     * let multiple accordions be open\n     * at once, but user passes an array\n     * just grab the first value.\n     */\n    if (!multiple && Array.isArray(value)) {\n      this.value = value[0];\n    }\n    else {\n      this.ionChange.emit({ value: this.value });\n    }\n  }\n  async disabledChanged() {\n    const { disabled } = this;\n    const accordions = await this.getAccordions();\n    for (const accordion of accordions) {\n      accordion.disabled = disabled;\n    }\n  }\n  async readonlyChanged() {\n    const { readonly } = this;\n    const accordions = await this.getAccordions();\n    for (const accordion of accordions) {\n      accordion.readonly = readonly;\n    }\n  }\n  async onKeydown(ev) {\n    const activeElement = document.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    /**\n     * Make sure focus is in the header, not the body, of the accordion. This ensures\n     * that if there are any interactable elements in the body, their keyboard\n     * interaction doesn't get stolen by the accordion. Example: using up/down keys\n     * in ion-textarea.\n     */\n    const activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n    if (!activeAccordionHeader) {\n      return;\n    }\n    const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n    if (!accordionEl) {\n      return;\n    }\n    const closestGroup = accordionEl.closest('ion-accordion-group');\n    if (closestGroup !== this.el) {\n      return;\n    }\n    // If the active accordion is not in the current array of accordions, do not do anything\n    const accordions = await this.getAccordions();\n    const startingIndex = accordions.findIndex((a) => a === accordionEl);\n    if (startingIndex === -1) {\n      return;\n    }\n    let accordion;\n    if (ev.key === 'ArrowDown') {\n      accordion = this.findNextAccordion(accordions, startingIndex);\n    }\n    else if (ev.key === 'ArrowUp') {\n      accordion = this.findPreviousAccordion(accordions, startingIndex);\n    }\n    else if (ev.key === 'Home') {\n      accordion = accordions[0];\n    }\n    else if (ev.key === 'End') {\n      accordion = accordions[accordions.length - 1];\n    }\n    if (accordion !== undefined && accordion !== activeElement) {\n      accordion.focus();\n    }\n  }\n  async componentDidLoad() {\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n    if (this.readonly) {\n      this.readonlyChanged();\n    }\n  }\n  /**\n   * @internal\n   */\n  async requestAccordionToggle(accordionValue, accordionExpand) {\n    const { multiple, value, readonly, disabled } = this;\n    if (readonly || disabled) {\n      return;\n    }\n    if (accordionExpand) {\n      /**\n       * If group accepts multiple values\n       * check to see if value is already in\n       * in values array. If not, add it\n       * to the array.\n       */\n      if (multiple) {\n        const groupValue = value !== null && value !== void 0 ? value : [];\n        const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n        const valueExists = processedValue.find((v) => v === accordionValue);\n        if (valueExists === undefined && accordionValue !== undefined) {\n          this.value = [...processedValue, accordionValue];\n        }\n      }\n      else {\n        this.value = accordionValue;\n      }\n    }\n    else {\n      /**\n       * If collapsing accordion, either filter the value\n       * out of the values array or unset the value.\n       */\n      if (multiple) {\n        const groupValue = value !== null && value !== void 0 ? value : [];\n        const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n        this.value = processedValue.filter((v) => v !== accordionValue);\n      }\n      else {\n        this.value = undefined;\n      }\n    }\n  }\n  findNextAccordion(accordions, startingIndex) {\n    const nextAccordion = accordions[startingIndex + 1];\n    if (nextAccordion === undefined) {\n      return accordions[0];\n    }\n    return nextAccordion;\n  }\n  findPreviousAccordion(accordions, startingIndex) {\n    const prevAccordion = accordions[startingIndex - 1];\n    if (prevAccordion === undefined) {\n      return accordions[accordions.length - 1];\n    }\n    return prevAccordion;\n  }\n  /**\n   * @internal\n   */\n  async getAccordions() {\n    return Array.from(this.el.querySelectorAll(':scope > ion-accordion'));\n  }\n  render() {\n    const { disabled, readonly, expand } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'accordion-group-disabled': disabled,\n        'accordion-group-readonly': readonly,\n        [`accordion-group-expand-${expand}`]: true,\n      }, role: \"presentation\" }, h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChanged\"],\n    \"disabled\": [\"disabledChanged\"],\n    \"readonly\": [\"readonlyChanged\"]\n  }; }\n};\nAccordionGroup.style = {\n  ios: accordionGroupIosCss,\n  md: accordionGroupMdCss\n};\n\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };\n"],"x_google_ignoreList":[0]}