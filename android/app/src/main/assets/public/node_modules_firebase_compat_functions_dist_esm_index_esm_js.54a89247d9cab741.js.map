{"version":3,"file":"node_modules_firebase_compat_functions_dist_esm_index_esm_js.54a89247d9cab741.js","mappings":"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","names":["mapValues","o","f","result","key","hasOwnProperty","encode","data","Number","valueOf","isFinite","Object","prototype","toString","call","Date","toISOString","Array","isArray","map","x","Error","decode","json","value","isNaN","FUNCTIONS_TYPE","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FunctionsError","FirebaseError","constructor","code","message","details","super","this","_errorForResponse","status","bodyJSON","codeForHTTPStatus","description","errorJSON","error","undefined","ContextProvider","authProvider","messagingProvider","appCheckProvider","auth","messaging","appCheck","getImmediate","optional","get","then","getAuthToken","_this","token","getToken","accessToken","getMessagingToken","_this2","self","Notification","permission","getAppCheckToken","_this3","getContext","authToken","_this4","messagingToken","appCheckToken","DEFAULT_REGION","failAfter","millis","timer","promise","Promise","_","reject","setTimeout","cancel","clearTimeout","FunctionsService","app","regionOrCustomDomain","fetchImpl","emulatorOrigin","contextProvider","cancelAllRequests","resolve","deleteService","url","URL","customDomain","origin","region","_delete","_url","name","projectId","options","httpsCallable$1","functionsInstance","callAtURL","postJSON","_x","body","headers","response","method","JSON","stringify","apply","_x5","context","Authorization","failAfterHandle","timeout","race","responseData","version","connectFunctionsEmulator","host","port","connectFunctionsEmulator$1","getModularInstance","httpsCallableFromURL","httpsCallableFromURL$1","registerFunctions","variant","_registerComponent","Component","container","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","fetch","bind","_delegate","_region","_customDomain","httpsCallable","useFunctionsEmulator","match","useEmulator","factory","functionsServiceExp","identifier","namespaceExports","Functions","firebase","setServiceProps"],"sourceRoot":"webpack:///","sources":["./node_modules/@firebase/functions/dist/index.esm2017.js","./node_modules/@firebase/functions-compat/dist/index.esm2017.js"],"sourcesContent":["import { _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\r\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\r\nfunction mapValues(\r\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\no, f) {\r\n    const result = {};\r\n    for (const key in o) {\r\n        if (o.hasOwnProperty(key)) {\r\n            result[key] = f(o[key]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\r\nfunction encode(data) {\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    if (data instanceof Number) {\r\n        data = data.valueOf();\r\n    }\r\n    if (typeof data === 'number' && isFinite(data)) {\r\n        // Any number in JS is safe to put directly in JSON and parse as a double\r\n        // without any loss of precision.\r\n        return data;\r\n    }\r\n    if (data === true || data === false) {\r\n        return data;\r\n    }\r\n    if (Object.prototype.toString.call(data) === '[object String]') {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        return data.toISOString();\r\n    }\r\n    if (Array.isArray(data)) {\r\n        return data.map(x => encode(x));\r\n    }\r\n    if (typeof data === 'function' || typeof data === 'object') {\r\n        return mapValues(data, x => encode(x));\r\n    }\r\n    // If we got this far, the data is not encodable.\r\n    throw new Error('Data cannot be encoded in JSON: ' + data);\r\n}\r\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\r\nfunction decode(json) {\r\n    if (json == null) {\r\n        return json;\r\n    }\r\n    if (json['@type']) {\r\n        switch (json['@type']) {\r\n            case LONG_TYPE:\r\n            // Fall through and handle this the same as unsigned.\r\n            case UNSIGNED_LONG_TYPE: {\r\n                // Technically, this could work return a valid number for malformed\r\n                // data if there was a number followed by garbage. But it's just not\r\n                // worth all the extra code to detect that case.\r\n                const value = Number(json['value']);\r\n                if (isNaN(value)) {\r\n                    throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                }\r\n                return value;\r\n            }\r\n            default: {\r\n                throw new Error('Data cannot be decoded from JSON: ' + json);\r\n            }\r\n        }\r\n    }\r\n    if (Array.isArray(json)) {\r\n        return json.map(x => decode(x));\r\n    }\r\n    if (typeof json === 'function' || typeof json === 'object') {\r\n        return mapValues(json, x => decode(x));\r\n    }\r\n    // Anything else is safe to return.\r\n    return json;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Functions.\r\n */\r\nconst FUNCTIONS_TYPE = 'functions';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\r\nconst errorCodeMap = {\r\n    OK: 'ok',\r\n    CANCELLED: 'cancelled',\r\n    UNKNOWN: 'unknown',\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n    NOT_FOUND: 'not-found',\r\n    ALREADY_EXISTS: 'already-exists',\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    ABORTED: 'aborted',\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    UNIMPLEMENTED: 'unimplemented',\r\n    INTERNAL: 'internal',\r\n    UNAVAILABLE: 'unavailable',\r\n    DATA_LOSS: 'data-loss'\r\n};\r\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\r\nclass FunctionsError extends FirebaseError {\r\n    constructor(\r\n    /**\r\n     * A standard error code that will be returned to the client. This also\r\n     * determines the HTTP status code of the response, as defined in code.proto.\r\n     */\r\n    code, message, \r\n    /**\r\n     * Extra data to be converted to JSON and included in the error response.\r\n     */\r\n    details) {\r\n        super(`${FUNCTIONS_TYPE}/${code}`, message || '');\r\n        this.details = details;\r\n    }\r\n}\r\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\r\nfunction codeForHTTPStatus(status) {\r\n    // Make sure any successful status is OK.\r\n    if (status >= 200 && status < 300) {\r\n        return 'ok';\r\n    }\r\n    switch (status) {\r\n        case 0:\r\n            // This can happen if the server returns 500.\r\n            return 'internal';\r\n        case 400:\r\n            return 'invalid-argument';\r\n        case 401:\r\n            return 'unauthenticated';\r\n        case 403:\r\n            return 'permission-denied';\r\n        case 404:\r\n            return 'not-found';\r\n        case 409:\r\n            return 'aborted';\r\n        case 429:\r\n            return 'resource-exhausted';\r\n        case 499:\r\n            return 'cancelled';\r\n        case 500:\r\n            return 'internal';\r\n        case 501:\r\n            return 'unimplemented';\r\n        case 503:\r\n            return 'unavailable';\r\n        case 504:\r\n            return 'deadline-exceeded';\r\n    }\r\n    return 'unknown';\r\n}\r\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\r\nfunction _errorForResponse(status, bodyJSON) {\r\n    let code = codeForHTTPStatus(status);\r\n    // Start with reasonable defaults from the status code.\r\n    let description = code;\r\n    let details = undefined;\r\n    // Then look through the body for explicit details.\r\n    try {\r\n        const errorJSON = bodyJSON && bodyJSON.error;\r\n        if (errorJSON) {\r\n            const status = errorJSON.status;\r\n            if (typeof status === 'string') {\r\n                if (!errorCodeMap[status]) {\r\n                    // They must've included an unknown error code in the body.\r\n                    return new FunctionsError('internal', 'internal');\r\n                }\r\n                code = errorCodeMap[status];\r\n                // TODO(klimt): Add better default descriptions for error enums.\r\n                // The default description needs to be updated for the new code.\r\n                description = status;\r\n            }\r\n            const message = errorJSON.message;\r\n            if (typeof message === 'string') {\r\n                description = message;\r\n            }\r\n            details = errorJSON.details;\r\n            if (details !== undefined) {\r\n                details = decode(details);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // If we couldn't parse explicit error data, that's fine.\r\n    }\r\n    if (code === 'ok') {\r\n        // Technically, there's an edge case where a developer could explicitly\r\n        // return an error code of OK, and we will treat it as success, but that\r\n        // seems reasonable.\r\n        return null;\r\n    }\r\n    return new FunctionsError(code, description, details);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\r\nclass ContextProvider {\r\n    constructor(authProvider, messagingProvider, appCheckProvider) {\r\n        this.auth = null;\r\n        this.messaging = null;\r\n        this.appCheck = null;\r\n        this.auth = authProvider.getImmediate({ optional: true });\r\n        this.messaging = messagingProvider.getImmediate({\r\n            optional: true\r\n        });\r\n        if (!this.auth) {\r\n            authProvider.get().then(auth => (this.auth = auth), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.messaging) {\r\n            messagingProvider.get().then(messaging => (this.messaging = messaging), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.appCheck) {\r\n            appCheckProvider.get().then(appCheck => (this.appCheck = appCheck), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n    }\r\n    async getAuthToken() {\r\n        if (!this.auth) {\r\n            return undefined;\r\n        }\r\n        try {\r\n            const token = await this.auth.getToken();\r\n            return token === null || token === void 0 ? void 0 : token.accessToken;\r\n        }\r\n        catch (e) {\r\n            // If there's any error when trying to get the auth token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getMessagingToken() {\r\n        if (!this.messaging ||\r\n            !('Notification' in self) ||\r\n            Notification.permission !== 'granted') {\r\n            return undefined;\r\n        }\r\n        try {\r\n            return await this.messaging.getToken();\r\n        }\r\n        catch (e) {\r\n            // We don't warn on this, because it usually means messaging isn't set up.\r\n            // console.warn('Failed to retrieve instance id token.', e);\r\n            // If there's any error when trying to get the token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getAppCheckToken() {\r\n        if (this.appCheck) {\r\n            const result = await this.appCheck.getToken();\r\n            if (result.error) {\r\n                // Do not send the App Check header to the functions endpoint if\r\n                // there was an error from the App Check exchange endpoint. The App\r\n                // Check SDK will already have logged the error to console.\r\n                return null;\r\n            }\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    async getContext() {\r\n        const authToken = await this.getAuthToken();\r\n        const messagingToken = await this.getMessagingToken();\r\n        const appCheckToken = await this.getAppCheckToken();\r\n        return { authToken, messagingToken, appCheckToken };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_REGION = 'us-central1';\r\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\r\nfunction failAfter(millis) {\r\n    // Node timers and browser timers are fundamentally incompatible, but we\r\n    // don't care about the value here\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let timer = null;\r\n    return {\r\n        promise: new Promise((_, reject) => {\r\n            timer = setTimeout(() => {\r\n                reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\r\n            }, millis);\r\n        }),\r\n        cancel: () => {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\r\nclass FunctionsService {\r\n    /**\r\n     * Creates a new Functions service for the given app.\r\n     * @param app - The FirebaseApp to use.\r\n     */\r\n    constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {\r\n        this.app = app;\r\n        this.fetchImpl = fetchImpl;\r\n        this.emulatorOrigin = null;\r\n        this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider);\r\n        // Cancels all ongoing requests when resolved.\r\n        this.cancelAllRequests = new Promise(resolve => {\r\n            this.deleteService = () => {\r\n                return Promise.resolve(resolve());\r\n            };\r\n        });\r\n        // Resolve the region or custom domain overload by attempting to parse it.\r\n        try {\r\n            const url = new URL(regionOrCustomDomain);\r\n            this.customDomain = url.origin;\r\n            this.region = DEFAULT_REGION;\r\n        }\r\n        catch (e) {\r\n            this.customDomain = null;\r\n            this.region = regionOrCustomDomain;\r\n        }\r\n    }\r\n    _delete() {\r\n        return this.deleteService();\r\n    }\r\n    /**\r\n     * Returns the URL for a callable with the given name.\r\n     * @param name - The name of the callable.\r\n     * @internal\r\n     */\r\n    _url(name) {\r\n        const projectId = this.app.options.projectId;\r\n        if (this.emulatorOrigin !== null) {\r\n            const origin = this.emulatorOrigin;\r\n            return `${origin}/${projectId}/${this.region}/${name}`;\r\n        }\r\n        if (this.customDomain !== null) {\r\n            return `${this.customDomain}/${name}`;\r\n        }\r\n        return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\r\n    }\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\r\n    functionsInstance.emulatorOrigin = `http://${host}:${port}`;\r\n}\r\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable$1(functionsInstance, name, options) {\r\n    return (data => {\r\n        return call(functionsInstance, name, data, options || {});\r\n    });\r\n}\r\n/**\r\n * Returns a reference to the callable https trigger with the given url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\r\n    return (data => {\r\n        return callAtURL(functionsInstance, url, data, options || {});\r\n    });\r\n}\r\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\r\nasync function postJSON(url, body, headers, fetchImpl) {\r\n    headers['Content-Type'] = 'application/json';\r\n    let response;\r\n    try {\r\n        response = await fetchImpl(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers\r\n        });\r\n    }\r\n    catch (e) {\r\n        // This could be an unhandled error on the backend, or it could be a\r\n        // network error. There's no way to know, since an unhandled error on the\r\n        // backend will fail to set the proper CORS header, and thus will be\r\n        // treated as a network error by fetch.\r\n        return {\r\n            status: 0,\r\n            json: null\r\n        };\r\n    }\r\n    let json = null;\r\n    try {\r\n        json = await response.json();\r\n    }\r\n    catch (e) {\r\n        // If we fail to parse JSON, it will fail the same as an empty body.\r\n    }\r\n    return {\r\n        status: response.status,\r\n        json\r\n    };\r\n}\r\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\r\nfunction call(functionsInstance, name, data, options) {\r\n    const url = functionsInstance._url(name);\r\n    return callAtURL(functionsInstance, url, data, options);\r\n}\r\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param url The url of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\r\nasync function callAtURL(functionsInstance, url, data, options) {\r\n    // Encode any special types, such as dates, in the input data.\r\n    data = encode(data);\r\n    const body = { data };\r\n    // Add a header for the authToken.\r\n    const headers = {};\r\n    const context = await functionsInstance.contextProvider.getContext();\r\n    if (context.authToken) {\r\n        headers['Authorization'] = 'Bearer ' + context.authToken;\r\n    }\r\n    if (context.messagingToken) {\r\n        headers['Firebase-Instance-ID-Token'] = context.messagingToken;\r\n    }\r\n    if (context.appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = context.appCheckToken;\r\n    }\r\n    // Default timeout to 70s, but let the options override it.\r\n    const timeout = options.timeout || 70000;\r\n    const failAfterHandle = failAfter(timeout);\r\n    const response = await Promise.race([\r\n        postJSON(url, body, headers, functionsInstance.fetchImpl),\r\n        failAfterHandle.promise,\r\n        functionsInstance.cancelAllRequests\r\n    ]);\r\n    // Always clear the failAfter timeout\r\n    failAfterHandle.cancel();\r\n    // If service was deleted, interrupted response throws an error.\r\n    if (!response) {\r\n        throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\r\n    }\r\n    // Check for an error status, regardless of http status.\r\n    const error = _errorForResponse(response.status, response.json);\r\n    if (error) {\r\n        throw error;\r\n    }\r\n    if (!response.json) {\r\n        throw new FunctionsError('internal', 'Response is not valid JSON object.');\r\n    }\r\n    let responseData = response.json.data;\r\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\r\n    // backwards compatibility.\r\n    if (typeof responseData === 'undefined') {\r\n        responseData = response.json.result;\r\n    }\r\n    if (typeof responseData === 'undefined') {\r\n        // Consider the response malformed.\r\n        throw new FunctionsError('internal', 'Response is missing data field.');\r\n    }\r\n    // Decode any special types, such as dates, in the returned data.\r\n    const decodedData = decode(responseData);\r\n    return { data: decodedData };\r\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.9.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst AUTH_INTERNAL_NAME = 'auth-internal';\r\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\r\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\r\nfunction registerFunctions(fetchImpl, variant) {\r\n    const factory = (container, { instanceIdentifier: regionOrCustomDomain }) => {\r\n        // Dependencies\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\r\n        const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\r\n        const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\r\n    };\r\n    _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\r\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\r\n    // Dependencies\r\n    const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\r\n    const functionsInstance = functionsProvider.getImmediate({\r\n        identifier: regionOrCustomDomain\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('functions');\r\n    if (emulator) {\r\n        connectFunctionsEmulator(functionsInstance, ...emulator);\r\n    }\r\n    return functionsInstance;\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\r\n    connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\r\n}\r\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable(functionsInstance, name, options) {\r\n    return httpsCallable$1(getModularInstance(functionsInstance), name, options);\r\n}\r\n/**\r\n * Returns a reference to the callable HTTPS trigger with the specified url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallableFromURL(functionsInstance, url, options) {\r\n    return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\r\n}\n\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterFunctions(fetch.bind(self));\n\nexport { connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };\n","import firebase from '@firebase/app-compat';\nimport { httpsCallable, httpsCallableFromURL, connectFunctionsEmulator } from '@firebase/functions';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\nconst name = \"@firebase/functions-compat\";\nconst version = \"0.3.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FunctionsService {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n        this._region = this._delegate.region;\r\n        this._customDomain = this._delegate.customDomain;\r\n    }\r\n    httpsCallable(name, options) {\r\n        return httpsCallable(this._delegate, name, options);\r\n    }\r\n    httpsCallableFromURL(url, options) {\r\n        return httpsCallableFromURL(this._delegate, url, options);\r\n    }\r\n    /**\r\n     * Deprecated in pre-modularized repo, does not exist in modularized\r\n     * functions package, need to convert to \"host\" and \"port\" args that\r\n     * `useFunctionsEmulatorExp` takes.\r\n     * @deprecated\r\n     */\r\n    useFunctionsEmulator(origin) {\r\n        const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\r\n        if (match == null) {\r\n            throw new FirebaseError('functions', 'No origin provided to useFunctionsEmulator()');\r\n        }\r\n        if (match[2] == null) {\r\n            throw new FirebaseError('functions', 'Port missing in origin provided to useFunctionsEmulator()');\r\n        }\r\n        return connectFunctionsEmulator(this._delegate, match[1], Number(match[2]));\r\n    }\r\n    useEmulator(host, port) {\r\n        return connectFunctionsEmulator(this._delegate, host, port);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_REGION = 'us-central1';\r\nconst factory = (container, { instanceIdentifier: regionOrCustomDomain }) => {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const functionsServiceExp = container.getProvider('functions').getImmediate({\r\n        identifier: regionOrCustomDomain !== null && regionOrCustomDomain !== void 0 ? regionOrCustomDomain : DEFAULT_REGION\r\n    });\r\n    return new FunctionsService(app, functionsServiceExp);\r\n};\r\nfunction registerFunctions() {\r\n    const namespaceExports = {\r\n        Functions: FunctionsService\r\n    };\r\n    firebase.INTERNAL.registerComponent(new Component('functions-compat', factory, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterFunctions();\r\nfirebase.registerVersion(name, version);\n"],"x_google_ignoreList":[0,1]}